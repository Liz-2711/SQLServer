App_Name() Returns the application name for the current session, if the application sets that name value;
Cast() These function convert an expression of one data type to another;
Coalesce() Returns the first non-null value in a list;
Collationproperty() Returns an approximate interpolated value from the set of values in a group based on percentile value and sort specification;
Columns_Updated() Returns a varbinary bit pattern indicating the inserted or updated columns of a table or view. Use COLUMNS_UPDATED anywhere inside the body of a Transact-SQL INSERT or UPDATE trigger to test whether the trigger should execute certain actions;
Convert() These function convert an expression of one data type to another;
Current_User Returns the name of the current security context. If CURRENT_USER executes after a call to EXECUTE AS switches context, CURRENT_USER will return the name of the impersonated context;
Datalength() Returns the number of bytes used to represent any expression;
@@Error Returns the error number for the last Transact-SQL statement executed;
fn_Helpcollations() Returns a list of all the collations suported;
fn_Indexinfo() Displays size and fragmentation for the data and indexes of the specified table;
::fn_Servershareddrives() Returns the names of shared drives used by the clustered server;
::fn_Virtualservernodes() Returns a list of nodes on which a virtual server can run;
Formatmessage() Constructs a message from an existing message in sys.messages or from a provided string. The functionality of FORMATMESSAGE resembles that of the RAISERROR statement. However, RAISERROR prints the message immediately, while FORMATMESSAGE returns the formatted message for further processing;
Getansinull() Returns the default nullability for the database for this session;
Host_Id() Returns the workstation identification number. The workstation identification number is the process ID (PID) of the application on the client computer that is connecting to SQL Server;
Host_Name() Returns the workstation name;
Ident_Current() Returns the last identity value generated for a specific table in any session and any scope;
Ident_Incr() Returns NULL on error or if a caller doesn't have object view permission;
Ident_Seed() Returns the original seed value specified when creating an identity column in a table or a view;
@@Identity Is used only in a SELECT statement with an INTO table clause to insert an identity column into a new table. Although similar, the IDENTITY function is not the IDENTITY property that is used with CREATE TABLE and ALTER TABLE;
Identity() (Select Into) Used in SELECT INTO statement to insert an identity column into a new table;
Isnull() Replaces NULL with the specified replacement value;
Isnumeric() Determines whether an expression is a valid numeric type;
Newid() Creates a unique value of type uniqueidentifier;
Nullif() Returns NULL if two expressions are equal, otherwise it returns the first expression;
Parsename() Returns the specified part of an object name;
Permissions() Returns a value containing a bitmap that indicates the statement, object, or column permissions of the current user;
@@Rowcount Returns the number of rows affected by the last statement;
Rowcount_Big() Returns the number of rows affected by the last statement executed. This function operates like @@ROWCOUNT, except the return type of ROWCOUNT_BIG is bigint;
Scope_Identity() Returns the last identity value inserted into an identity column in the same scope. A scope is a module: a stored procedure, trigger, function, or batch. Therefore, if two statements are in the same stored procedure, function, or batch, they are in the same scope;
Serverproperty() Returns property information about the server instance;
Sessionproperty() Returns information about the current SET options;
Session_User Returns the user name of the current context in the current database;
Stats_Date() Returns the date of the most recent update for statistics on a table or indexed view;
System_User Allows a system-supplied value for the current login to be inserted into a table when no default value is specified;
@@Trancount Returns the number of active transactions for the current connection;
Update() Returns a Boolean value that indicates whether an INSERT or UPDATE attempt was made on a specified column of a table or view. UPDATE() is used anywhere inside the body of a Transact-SQL INSERT or UPDATE trigger to test whether the trigger should execute certain actions;
User_Name() Returns a database user name from a specified identification number;